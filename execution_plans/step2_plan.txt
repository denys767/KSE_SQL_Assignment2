-> Sort: total_spent DESC  (actual time=20080..20092 rows=145977 loops=1)
    -> Stream results  (actual time=19869..20010 rows=145977 loops=1)
        -> Group aggregate: count(distinct order_items.order_id), sum(order_totals.order_amount), group_concat(distinct categories.category_name separator ', ')  (actual time=19869..19969 rows=145977 loops=1)
            -> Sort: c.customer_id, c.first_name, c.last_name  (actual time=19869..19885 rows=246997 loops=1)
                -> Stream results  (cost=52.4e+9 rows=524e+9) (actual time=6068..19665 rows=246997 loops=1)
                    -> Nested loop left join  (cost=52.4e+9 rows=524e+9) (actual time=6068..19548 rows=246997 loops=1)
                        -> Nested loop inner join  (cost=877195 rows=723563) (actual time=2457..15402 rows=157848 loops=1)
                            -> Filter: (ot.customer_id is not null)  (cost=0.113..81403 rows=723563) (actual time=2456..2493 rows=157848 loops=1)
                                -> Table scan on ot  (cost=2.5..2.5 rows=0) (actual time=2456..2479 rows=157848 loops=1)
                                    -> Materialize CTE order_totals  (cost=0..0 rows=0) (actual time=2456..2456 rows=157848 loops=1)
                                        -> Table scan on <temporary>  (actual time=2438..2447 rows=157848 loops=1)
                                            -> Aggregate using temporary table  (actual time=2438..2438 rows=157848 loops=1)
                                                -> Nested loop inner join  (cost=1.47e+6 rows=723563) (actual time=1.81..2272 rows=213357 loops=1)
                                                    -> Nested loop inner join  (cost=673519 rows=723563) (actual time=1.51..1052 rows=213357 loops=1)
                                                        -> Filter: ((orders.`status` = 'completed') and (orders.order_date >= <cache>((curdate() - interval 1 year))))  (cost=102367 rows=498219) (actual time=1.19..400 rows=333394 loops=1)
                                                            -> Table scan on orders  (cost=102367 rows=996438) (actual time=1.18..277 rows=1e+6 loops=1)
                                                        -> Covering index lookup on oi using idx_order_items_covering (order_id=orders.order_id)  (cost=1 rows=1.45) (actual time=0.00172..0.00186 rows=0.64 loops=333394)
                                                    -> Covering index lookup on p using idx_products_productid_price (product_id=oi.product_id)  (cost=1 rows=1) (actual time=0.00527..0.00558 rows=1 loops=213357)
                            -> Single-row index lookup on c using PRIMARY (customer_id=ot.customer_id)  (cost=1 rows=1) (actual time=0.0816..0.0816 rows=1 loops=157848)
                        -> Index lookup on cc using <auto_key0> (customer_id=ot.customer_id)  (cost=2.42e+6..2.42e+6 rows=10) (actual time=0.0254..0.0259 rows=1.56 loops=157848)
                            -> Materialize CTE customer_categories  (cost=2.42e+6..2.42e+6 rows=723563) (actual time=3610..3610 rows=213263 loops=1)
                                -> Table scan on <temporary>  (cost=2.34e+6..2.35e+6 rows=723563) (actual time=3465..3486 rows=213263 loops=1)
                                    -> Temporary table with deduplication  (cost=2.34e+6..2.34e+6 rows=723563) (actual time=3465..3465 rows=213263 loops=1)
                                        -> Nested loop inner join  (cost=2.27e+6 rows=723563) (actual time=2.03..3320 rows=213357 loops=1)
                                            -> Nested loop inner join  (cost=1.47e+6 rows=723563) (actual time=1.62..1653 rows=213357 loops=1)
                                                -> Nested loop inner join  (cost=673519 rows=723563) (actual time=1.61..1029 rows=213357 loops=1)
                                                    -> Filter: ((orders.`status` = 'completed') and (orders.order_date >= <cache>((curdate() - interval 1 year))))  (cost=102367 rows=498219) (actual time=1.39..439 rows=333394 loops=1)
                                                        -> Table scan on orders  (cost=102367 rows=996438) (actual time=1.37..316 rows=1e+6 loops=1)
                                                    -> Covering index lookup on oi using idx_order_items_covering (order_id=orders.order_id)  (cost=1 rows=1.45) (actual time=0.00154..0.00168 rows=0.64 loops=333394)
                                                -> Filter: (p.category_id is not null)  (cost=1 rows=1) (actual time=0.00254..0.00282 rows=1 loops=213357)
                                                    -> Covering index lookup on p using idx_products_productid_price (product_id=oi.product_id)  (cost=1 rows=1) (actual time=0.00245..0.00269 rows=1 loops=213357)
                                            -> Covering index lookup on cat using idx_categories_categoryid_name (category_id=p.category_id)  (cost=1 rows=1) (actual time=0.00738..0.00768 rows=1 loops=213357)

time in seconds = 20.1 seconds