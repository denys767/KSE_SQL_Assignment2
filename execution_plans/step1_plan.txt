-> Sort: total_spent DESC  (actual time=0.0384..0.0384 rows=0 loops=1)
    -> Stream results  (actual time=0.0369..0.0369 rows=0 loops=1)
        -> Group aggregate: count(distinct orders.order_id), sum(order_totals.order_amount), group_concat(distinct categories.category_name separator ', ')  (actual time=0.0361..0.0361 rows=0 loops=1)
            -> Sort: c.customer_id, c.first_name, c.last_name  (actual time=0.0356..0.0356 rows=0 loops=1)
                -> Stream results  (cost=2.85 rows=0) (actual time=0.0327..0.0327 rows=0 loops=1)
                    -> Nested loop inner join  (cost=2.85 rows=0) (actual time=0.0321..0.0321 rows=0 loops=1)
                        -> Nested loop left join  (cost=1.85 rows=1.5) (actual time=0.0315..0.0315 rows=0 loops=1)
                            -> Nested loop inner join  (cost=1.2 rows=1) (actual time=0.0314..0.0314 rows=0 loops=1)
                                -> Filter: ((orders.`status` = 'completed') and (orders.order_date >= <cache>((curdate() - interval 1 year))) and (orders.customer_id is not null))  (cost=0.85 rows=1) (actual time=0.0311..0.0311 rows=0 loops=1)
                                    -> Table scan on orders  (cost=0.85 rows=6) (actual time=0.02..0.0234 rows=6 loops=1)
                                -> Single-row index lookup on c using PRIMARY (customer_id=orders.customer_id)  (cost=0.35 rows=1) (never executed)
                            -> Index lookup on cc using <auto_key0> (customer_id=orders.customer_id)  (cost=5.46..5.81 rows=2) (never executed)
                                -> Materialize CTE customer_categories  (cost=5.11..5.11 rows=1.5) (never executed)
                                    -> Table scan on <temporary>  (cost=4.13..4.96 rows=1.5) (never executed)
                                        -> Temporary table with deduplication  (cost=2.45..2.45 rows=1.5) (never executed)
                                            -> Nested loop inner join  (cost=2.3 rows=1.5) (never executed)
                                                -> Nested loop inner join  (cost=1.78 rows=1.5) (never executed)
                                                    -> Nested loop inner join  (cost=1.25 rows=1.5) (never executed)
                                                        -> Filter: ((o.`status` = 'completed') and (o.order_date >= <cache>((curdate() - interval 1 year))))  (cost=0.85 rows=1) (never executed)
                                                            -> Table scan on o  (cost=0.85 rows=6) (never executed)
                                                        -> Covering index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.4 rows=1.5) (never executed)
                                                    -> Filter: (p.category_id is not null)  (cost=0.317 rows=1) (never executed)
                                                        -> Single-row index lookup on p using PRIMARY (product_id=oi.product_id)  (cost=0.317 rows=1) (never executed)
                                                -> Single-row index lookup on cat using PRIMARY (category_id=p.category_id)  (cost=0.317 rows=1) (never executed)
                        -> Index lookup on ot using <auto_key0> (order_id=orders.order_id)  (cost=0.3..0.6 rows=2) (never executed)
                            -> Materialize CTE order_totals  (cost=0..0 rows=0) (never executed)
                                -> Table scan on <temporary>  (never executed)
                                    -> Aggregate using temporary table  (never executed)
                                        -> Nested loop inner join  (cost=4 rows=9) (never executed)
                                            -> Table scan on p  (cost=0.85 rows=6) (never executed)
                                            -> Index lookup on oi using product_id (product_id=p.product_id)  (cost=0.4 rows=1.5) (never executed)

Query block execution time: 0.038 seconds

